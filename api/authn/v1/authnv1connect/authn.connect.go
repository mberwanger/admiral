// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authn/v1/authn.proto

package authnv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.admiral.io/admiral/api/authn/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthnAPIName is the fully-qualified name of the AuthnAPI service.
	AuthnAPIName = "admiral.authn.v1.AuthnAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthnAPILoginProcedure is the fully-qualified name of the AuthnAPI's Login RPC.
	AuthnAPILoginProcedure = "/admiral.authn.v1.AuthnAPI/Login"
	// AuthnAPICallbackProcedure is the fully-qualified name of the AuthnAPI's Callback RPC.
	AuthnAPICallbackProcedure = "/admiral.authn.v1.AuthnAPI/Callback"
	// AuthnAPILogoutProcedure is the fully-qualified name of the AuthnAPI's Logout RPC.
	AuthnAPILogoutProcedure = "/admiral.authn.v1.AuthnAPI/Logout"
)

// AuthnAPIClient is a client for the admiral.authn.v1.AuthnAPI service.
type AuthnAPIClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Callback(context.Context, *connect.Request[v1.CallbackRequest]) (*connect.Response[v1.CallbackResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
}

// NewAuthnAPIClient constructs a client for the admiral.authn.v1.AuthnAPI service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthnAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthnAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authnAPIMethods := v1.File_authn_v1_authn_proto.Services().ByName("AuthnAPI").Methods()
	return &authnAPIClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthnAPILoginProcedure,
			connect.WithSchema(authnAPIMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		callback: connect.NewClient[v1.CallbackRequest, v1.CallbackResponse](
			httpClient,
			baseURL+AuthnAPICallbackProcedure,
			connect.WithSchema(authnAPIMethods.ByName("Callback")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthnAPILogoutProcedure,
			connect.WithSchema(authnAPIMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authnAPIClient implements AuthnAPIClient.
type authnAPIClient struct {
	login    *connect.Client[v1.LoginRequest, v1.LoginResponse]
	callback *connect.Client[v1.CallbackRequest, v1.CallbackResponse]
	logout   *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
}

// Login calls admiral.authn.v1.AuthnAPI.Login.
func (c *authnAPIClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Callback calls admiral.authn.v1.AuthnAPI.Callback.
func (c *authnAPIClient) Callback(ctx context.Context, req *connect.Request[v1.CallbackRequest]) (*connect.Response[v1.CallbackResponse], error) {
	return c.callback.CallUnary(ctx, req)
}

// Logout calls admiral.authn.v1.AuthnAPI.Logout.
func (c *authnAPIClient) Logout(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// AuthnAPIHandler is an implementation of the admiral.authn.v1.AuthnAPI service.
type AuthnAPIHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Callback(context.Context, *connect.Request[v1.CallbackRequest]) (*connect.Response[v1.CallbackResponse], error)
	Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
}

// NewAuthnAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthnAPIHandler(svc AuthnAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authnAPIMethods := v1.File_authn_v1_authn_proto.Services().ByName("AuthnAPI").Methods()
	authnAPILoginHandler := connect.NewUnaryHandler(
		AuthnAPILoginProcedure,
		svc.Login,
		connect.WithSchema(authnAPIMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authnAPICallbackHandler := connect.NewUnaryHandler(
		AuthnAPICallbackProcedure,
		svc.Callback,
		connect.WithSchema(authnAPIMethods.ByName("Callback")),
		connect.WithHandlerOptions(opts...),
	)
	authnAPILogoutHandler := connect.NewUnaryHandler(
		AuthnAPILogoutProcedure,
		svc.Logout,
		connect.WithSchema(authnAPIMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admiral.authn.v1.AuthnAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthnAPILoginProcedure:
			authnAPILoginHandler.ServeHTTP(w, r)
		case AuthnAPICallbackProcedure:
			authnAPICallbackHandler.ServeHTTP(w, r)
		case AuthnAPILogoutProcedure:
			authnAPILogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthnAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthnAPIHandler struct{}

func (UnimplementedAuthnAPIHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.authn.v1.AuthnAPI.Login is not implemented"))
}

func (UnimplementedAuthnAPIHandler) Callback(context.Context, *connect.Request[v1.CallbackRequest]) (*connect.Response[v1.CallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.authn.v1.AuthnAPI.Callback is not implemented"))
}

func (UnimplementedAuthnAPIHandler) Logout(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.authn.v1.AuthnAPI.Logout is not implemented"))
}
