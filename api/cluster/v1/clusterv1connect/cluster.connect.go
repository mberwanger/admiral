// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cluster/v1/cluster.proto

package clusterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.admiral.io/admiral/api/cluster/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterAPIName is the fully-qualified name of the ClusterAPI service.
	ClusterAPIName = "admiral.cluster.v1.ClusterAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterAPICreateClusterProcedure is the fully-qualified name of the ClusterAPI's CreateCluster
	// RPC.
	ClusterAPICreateClusterProcedure = "/admiral.cluster.v1.ClusterAPI/CreateCluster"
	// ClusterAPIListClustersProcedure is the fully-qualified name of the ClusterAPI's ListClusters RPC.
	ClusterAPIListClustersProcedure = "/admiral.cluster.v1.ClusterAPI/ListClusters"
	// ClusterAPIGetClusterProcedure is the fully-qualified name of the ClusterAPI's GetCluster RPC.
	ClusterAPIGetClusterProcedure = "/admiral.cluster.v1.ClusterAPI/GetCluster"
	// ClusterAPIUpdateClusterProcedure is the fully-qualified name of the ClusterAPI's UpdateCluster
	// RPC.
	ClusterAPIUpdateClusterProcedure = "/admiral.cluster.v1.ClusterAPI/UpdateCluster"
	// ClusterAPIDeleteClusterProcedure is the fully-qualified name of the ClusterAPI's DeleteCluster
	// RPC.
	ClusterAPIDeleteClusterProcedure = "/admiral.cluster.v1.ClusterAPI/DeleteCluster"
)

// ClusterAPIClient is a client for the admiral.cluster.v1.ClusterAPI service.
type ClusterAPIClient interface {
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
}

// NewClusterAPIClient constructs a client for the admiral.cluster.v1.ClusterAPI service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterAPIMethods := v1.File_cluster_v1_cluster_proto.Services().ByName("ClusterAPI").Methods()
	return &clusterAPIClient{
		createCluster: connect.NewClient[v1.CreateClusterRequest, v1.CreateClusterResponse](
			httpClient,
			baseURL+ClusterAPICreateClusterProcedure,
			connect.WithSchema(clusterAPIMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1.ListClustersRequest, v1.ListClustersResponse](
			httpClient,
			baseURL+ClusterAPIListClustersProcedure,
			connect.WithSchema(clusterAPIMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1.GetClusterRequest, v1.GetClusterResponse](
			httpClient,
			baseURL+ClusterAPIGetClusterProcedure,
			connect.WithSchema(clusterAPIMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		updateCluster: connect.NewClient[v1.UpdateClusterRequest, v1.UpdateClusterResponse](
			httpClient,
			baseURL+ClusterAPIUpdateClusterProcedure,
			connect.WithSchema(clusterAPIMethods.ByName("UpdateCluster")),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ClusterAPIDeleteClusterProcedure,
			connect.WithSchema(clusterAPIMethods.ByName("DeleteCluster")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterAPIClient implements ClusterAPIClient.
type clusterAPIClient struct {
	createCluster *connect.Client[v1.CreateClusterRequest, v1.CreateClusterResponse]
	listClusters  *connect.Client[v1.ListClustersRequest, v1.ListClustersResponse]
	getCluster    *connect.Client[v1.GetClusterRequest, v1.GetClusterResponse]
	updateCluster *connect.Client[v1.UpdateClusterRequest, v1.UpdateClusterResponse]
	deleteCluster *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
}

// CreateCluster calls admiral.cluster.v1.ClusterAPI.CreateCluster.
func (c *clusterAPIClient) CreateCluster(ctx context.Context, req *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// ListClusters calls admiral.cluster.v1.ClusterAPI.ListClusters.
func (c *clusterAPIClient) ListClusters(ctx context.Context, req *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// GetCluster calls admiral.cluster.v1.ClusterAPI.GetCluster.
func (c *clusterAPIClient) GetCluster(ctx context.Context, req *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// UpdateCluster calls admiral.cluster.v1.ClusterAPI.UpdateCluster.
func (c *clusterAPIClient) UpdateCluster(ctx context.Context, req *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// DeleteCluster calls admiral.cluster.v1.ClusterAPI.DeleteCluster.
func (c *clusterAPIClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// ClusterAPIHandler is an implementation of the admiral.cluster.v1.ClusterAPI service.
type ClusterAPIHandler interface {
	CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error)
	GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error)
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
}

// NewClusterAPIHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterAPIHandler(svc ClusterAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterAPIMethods := v1.File_cluster_v1_cluster_proto.Services().ByName("ClusterAPI").Methods()
	clusterAPICreateClusterHandler := connect.NewUnaryHandler(
		ClusterAPICreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(clusterAPIMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterAPIListClustersHandler := connect.NewUnaryHandler(
		ClusterAPIListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterAPIMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	clusterAPIGetClusterHandler := connect.NewUnaryHandler(
		ClusterAPIGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterAPIMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterAPIUpdateClusterHandler := connect.NewUnaryHandler(
		ClusterAPIUpdateClusterProcedure,
		svc.UpdateCluster,
		connect.WithSchema(clusterAPIMethods.ByName("UpdateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterAPIDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterAPIDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(clusterAPIMethods.ByName("DeleteCluster")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admiral.cluster.v1.ClusterAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterAPICreateClusterProcedure:
			clusterAPICreateClusterHandler.ServeHTTP(w, r)
		case ClusterAPIListClustersProcedure:
			clusterAPIListClustersHandler.ServeHTTP(w, r)
		case ClusterAPIGetClusterProcedure:
			clusterAPIGetClusterHandler.ServeHTTP(w, r)
		case ClusterAPIUpdateClusterProcedure:
			clusterAPIUpdateClusterHandler.ServeHTTP(w, r)
		case ClusterAPIDeleteClusterProcedure:
			clusterAPIDeleteClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterAPIHandler struct{}

func (UnimplementedClusterAPIHandler) CreateCluster(context.Context, *connect.Request[v1.CreateClusterRequest]) (*connect.Response[v1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.cluster.v1.ClusterAPI.CreateCluster is not implemented"))
}

func (UnimplementedClusterAPIHandler) ListClusters(context.Context, *connect.Request[v1.ListClustersRequest]) (*connect.Response[v1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.cluster.v1.ClusterAPI.ListClusters is not implemented"))
}

func (UnimplementedClusterAPIHandler) GetCluster(context.Context, *connect.Request[v1.GetClusterRequest]) (*connect.Response[v1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.cluster.v1.ClusterAPI.GetCluster is not implemented"))
}

func (UnimplementedClusterAPIHandler) UpdateCluster(context.Context, *connect.Request[v1.UpdateClusterRequest]) (*connect.Response[v1.UpdateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.cluster.v1.ClusterAPI.UpdateCluster is not implemented"))
}

func (UnimplementedClusterAPIHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admiral.cluster.v1.ClusterAPI.DeleteCluster is not implemented"))
}
